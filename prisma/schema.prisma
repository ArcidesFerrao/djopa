// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  image        String?
  password     String
  name         String
  role         Role // "SEEKER" or "EMPLOYER"
  createdAt    DateTime      @default(now())
  company      Company?
  applications Application[]
  Account      Account[]
  Session      Session[]
}

enum Role {
  SEEKER
  EMPLOYER
}

model Company {
  id          String    @id @default(cuid())
  name        String
  description String?
  website     String
  address     String
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  jobs        JobPost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobPost {
  id           String        @id @default(cuid())
  title        String
  description  String
  competencies String
  location     String
  type         String
  salary       Int?
  companyId    String
  company      Company       @relation(fields: [companyId], references: [id])
  applications Application[]
  expiresAt    DateTime
  createdAt    DateTime      @default(now())
}

model Application {
  id        String   @id @default(cuid())
  message   String?
  resumeUrl String
  jobPost   JobPost  @relation(fields: [jobPostId], references: [id])
  jobPostId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  status    Status   @default(PENDING)
  createdAt DateTime @default(now())
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // Optional
  access_token      String? // Optional
  expires_at        Int? // Optional

  @@unique([provider, providerAccountId]) // Prevent duplicates
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token]) // Ensure unique combinations
}
